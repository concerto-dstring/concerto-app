## organization
## ============
## organization: company is the tenant unit, managed by one admin User
##               so a Company + one admin User once created
type Company @model {
  id: ID!
  name: String!
  email: String!
  phone: String!
  admin: User @connection
  teams: [Team] @connection(keyName: "teamByCompany", fields: ["id"])
  createdAt: String!
}

## organization: company has multiple teams
type Team @model 
@key(name: "teamByCompany", fields: ["companyID", "name"]){
  id: ID!
  name: String!
  admin: User! @connection
  companyID: ID!
  company: Company @connection(fields: ["companyID"])
  ## team-user is a many to many relationship 
  users: [TeamUser] @connection(keyName: "userByTeam", fields: ["id"])
  upteam: ID
  downteams: [ID]
  createdAt: String!
}

## organization: team has multiple users, user can belong to multiple teams
type TeamUser
  @model(queries: null)
  @key(name: "userByTeam", fields: ["teamID", "userID"])
  @key(name: "teamByUser", fields: ["userID", "teamID"]) {
  id: ID!
  teamID: ID!
  userID: ID!
  team: Team! @connection(fields: ["teamID"])
  user: User! @connection(fields: ["userID"])
}

## organization: user
type User @model {
  id: ID!
  username: String!
  email: String!
  fname: String
  lname: String
  usertype: String
  title: String
  phone: String
  avatar: String
  ## team-user is a many to many relationship 
  teams: [TeamUser] @connection(keyName: "teamByUser", fields: ["id"])
  createdAt: String!
  boardCreated: [Board] @connection(keyName: "boardByUser", fields: ["id"])
  ## boardSubscribed-user is a many to many relationship 
  boardSubscribed: [BoardSubscribedUser]  @connection(keyName: "boardSubscribedByUser", fields: ["id"]) 
  groupCreated: [Group] @connection(keyName: "groupCreatedByUser", fields: ["id"])
  columnCreated: [Column] @connection(keyName: "columnCreatedByUser",  fields: ["id"])
  rowCreated: [Row] @connection(keyName: "rowCreatedByUser", fields:["id"])
}

#enum UserType {
#	  ADMIN
#    NORMAL
#	  VISITOR
#}

## UI
## ==
## boardSubscribed-user is a many to many relationship
type BoardSubscribedUser
  @model(queries: null)
  @key(name: "userByBoardSubscribed", fields: ["boardSubscribedID", "userID"])
  @key(name: "boardSubscribedByUser", fields: ["userID", "boardSubscribedID"]) {
  id: ID!
  boardSubscribedID: ID!
  userID: ID!
  boardSubscribed: Board! @connection(fields: ["boardSubscribedID"])
  user: User! @connection(fields: ["userID"])
}

## UI: board is the main container of UI for the maintable view
type Board @model 
@key(name: "boardByUser", fields: ["creatorID", "name"]) {
  id: ID!
  name: String!
  groups: [Group] @connection(keyName: "groupsByBoard", fields: ["id"])
  columns: [ColumnBoard] @connection(keyName: "columnsByBoard", fields: ["id"])
  creatorID: ID!
  creator: User!  @connection(fields: ["creatorID"])
  subscribers: [BoardSubscribedUser]  @connection(keyName: "userByBoardSubscribed", fields: ["id"]) 
  createdAt: String!
  deleteFlag: Boolean
}

## basic element of board, a group belongs to one board
type Group @model 
@key(name: "groupsByBoard", fields: ["boardID", "name"]) 
@key(name: "groupCreatedByUser", fields: ["creatorID", "name"]) {
  id: ID!
  name: String!
  boardID: ID!
  board: Board! @connection(fields: ["boardID"])
  rows: [Row] @connection(keyName: "rowsByGroup", fields:["id"])
  creatorID: ID!
  creator: User! @connection(fields: ["creatorID"])
  rank: String!
  deleteFlag: Boolean
  isCollapsed: Boolean!
  color: String!
  createdAt: String!
}

## one task per row
type Row @model 
@key(name: "rowsByGroup", fields: ["groupID", "rank"]) 
@key(name: "rowCreatedByUser", fields: ["creatorID", "rank"]){
  id: ID!
  groupID: ID!
  group: Group! @connection(fields: ["groupID"])
  datas: [Data]  @connection(keyName: "datasByRow", fields:["id"])
  creatorID: ID!
  creator: User!  @connection(fields: ["creatorID"])
  threadOnRow: [ThreadOnRow] @connection(keyName: "threadOnRowByRow", fields: ["id"])
  rank: String!
  parentId: ID
  deleteFlag: Boolean
  createdAt: String!
}

## column-board is a many to many relationship
type ColumnBoard
  @model(queries: null)
  @key(name: "columnsByBoard", fields: ["boardID", "columnID"])
  @key(name: "boardByColumn", fields: ["columnID", "boardID"]) {
  id: ID!
  boardID: ID!
  columnID: ID!
  board: Board! @connection(fields: ["boardID"])
  column: Column! @connection(fields: ["columnID"])
  fixed: Boolean!
  level: Int!
  collpse: Boolean!
  deleteFlag: Boolean
  rank: String!
}

## column library 
type Column @model
@key(name: "columnCreatedByUser", fields: ["creatorID", "name"]) {
  id: ID!
  board: [ColumnBoard] @connection(keyName: "boardByColumn", fields:["id"])
  isTitle: Boolean
  name: String!
  columntype: String!
  columnComponentType: String
  creatorID: ID!
  creator: User! @connection(fields:["creatorID"]) 
  createdAt: String!
  deleteFlag: Boolean
  datas: [Data] @connection(keyName: "datasByColumn", fields: ["id"])
}

## object instance of one data value in the intersection of a column and a row
type Data @model 
@key(name: "datasByRow", fields: ["rowID", "id"]) 
@key(name: "datasByColumn", fields: ["columnID", "id"]) {
  id: ID!
  columnID: ID!
  rowID: ID!
  value: String   
}

## row-based interaction threading, sorted by the createdAt date-time
type ThreadOnRow @model 
 @key(name: "threadOnRowByRow", fields: ["rowID", "id"]) {
  id: ID!
  rowID: ID!
  row: Row! @connection(fields:["rowID"])
  userID: ID!
  user: User @connection(fields:["userID"])
  content: String!
  createdAt: String!
  likedByUsersID: [ID]
  seenByUsersID: [ID]
  repliesByDate: [ReplyOnThread]  @connection(keyName: "repliesByDate", fields: ["id"])
}

## reply to the thread, ThreadOnRow <-- 1:n --> Reply, sorted by the createdAt date-time
type ReplyOnThread @model 
@key(name: "repliesByDate", fields: ["threadID", "createdAt"]) {
  id: ID!
  threadID: ID!
  userID: ID!
  user: User @connection(fields:["userID"])
  content: String!
  createdAt: String!
  likedByUsersID: [ID]
  seenByUsersID: [ID]
}

## row-based attachments/inbox, , sorted by the createdAt date-time
type InboxOnRow @model 
 @key(fields: ["id", "createdAt"]) {
  id: ID!
  rowID: ID!
  userID: ID!
  user: User @connection(fields:["userID"])
  filelocations: String!  # s3 location
  createdAt: String!
}

## notification service
type Notification @model {
  id: ID!
  subject: String!
  content: String
  senderID: ID!
  sender: User @connection(fields:["senderID"])
  receiverID: ID!
  receiver: User @connection(fields:["receiverID"])
  seenflag: Boolean
  createdAt: String!
  boardID: ID!
  board: Board @connection(fields:["boardID"])
  groupID: ID!
  group: Group @connection(fields:["groupID"])
  rowID: ID!
  row: Row @connection(fields:["rowID"])
  threadOnRowID: ID!
  threadOnRow: ThreadOnRow @connection(fields:["threadOnRowID"])
}
